<?php

namespace Tests\Comet;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use EnricoStahn\JsonAssert\Assert as JsonAssert;

class CometApiTest extends TestCase
{
    use RefreshDatabase, JsonAssert, HasHooks;

    /**
     * Run seeds.
     */
    public function setUp(): void
    {
        parent::setUp();
        $this->artisan('db:seed');
    }

    {{#each testcases}}


      {{#if isFaulty}}
        public function test{{getTestCaseName this}}()
        {
            $body = {{getBody this}};
            $headers = $this->getJsonHeaders($body);
            $response = $this->executeRequest('${testCase.method.toUpperCase()}', '{{url}}', $headers, $body);
            $this->assertHasClientError($response);
        }
      {{else}}
        public function test{{getTestCaseName this}}()
        {
            $body = {{getBody this}};
            $headers = $this->getJsonHeaders($body);
            $response = $this->executeRequest('${testCase.method.toUpperCase()}', '{{url}}', $headers, $body);
            $response->assertSuccessful();
            {{#if schema}}
              $responseContent = $response->getContent();
              $this->assertJsonMatchesSchema(json_decode($responseContent), {{getSchemaPath this}});
            {{/if}}
        }
      {{/if}}
    {{/each}}

    /**
    * Assert that a test response returned a client error (4xx).
    * @param \Illuminate\Foundation\Testing\TestResponse $response
    */
    protected function assertHasClientError($response)
    {
        $this->assertTrue(
            $response->isClientError(),
            'Response status code ['.$response->getStatusCode().'] is not a client error status code.'
        );
    }

    /**
    * Get default JSON request headers.
    * @param string $body
    * @return array
    */
    protected function getJsonHeaders($body)
    {
        return  [
            'CONTENT_LENGTH' => mb_strlen($body, '8bit'),
            'CONTENT_TYPE' => 'application/json',
            'Accept' => 'application/json',
        ];
    }

    /**
    * Execute the test request.
    * @param $method
    * @param $path
    * @param $headers
    * @param $body
    * @return \Illuminate\Foundation\Testing\TestResponse
    */
    protected function executeRequest($method, $path, $headers, $body)
    {
        return $this
              ->before()
              ->call($method, $path, [], [], [], $this->transformHeadersToServerVars($headers), $body);
    }
}
