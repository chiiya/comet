FORMAT: 1A
HOST: http://local.comet-demo.test/api/
AUTH_TYPE: key
AUTH_NAME: X-Authorization
AUTH_LOCATION: header

# Travel Books API
This project contains the implementation of a simple Laravel example RESTful API for travel books. 
We have several different models: countries, languages, authors and books. Travel books are written 
by one author, in one language, for one country. For this relatively simple API with 20 
endpoints, Comet is able to generate 112 test-cases.

## JSON API

In the following section, a short overview of the general capabilities
of the API will be given.

**Note:** This documentation will display parameters with brackets
(`[` and `]`) for readability, but actual URLs will need to be
percent-encoded (`%5B` and `%5D`).

### Filtering and Search

Filtering lets you query data that contains certain matching
attributes or relationships. These take the form of
`filter[attribute]=value`. For example, you can request all the
books by a certain publisher:
```http
/books?filter[publisher]=ABC
```

### Includes

For some resources (e.g. books), you can also include related resources
with `include=[relationship]`. A comma-delimited list can be used to
request multiple relationships.

```
/books?include=author,country
```

## Status Codes

Code  | Description
----- | -----------
`200` | OK
`204` | No Content - successful request with no response content
`400` | Bad Request - malformed request
`401` | Unauthorized - invalid or no authentication details provided
`404` | Not Found - resource does not exist
`405` | Method Not Allowed
`5xx` | Server Error

# Group Locales

The locale endpoints can be used to access information about countries and 
their respective languages.

:[](resources/countries.apib)

:[](resources/country.apib)

:[](resources/languages.apib)

:[](resources/language.apib)

# Group Root

:[](resources/authors.apib)

:[](resources/author.apib)

:[](resources/books.apib)

:[](resources/book.apib)

# Data Structures

## AuthorResponse (object, fixed-type)

+ id: `1` (number, required) - ID of the author
+ last_name: `Wehner` (string, required)
+ first_name: `Tony` (string, required)
+ date_of_birth: `2002-08-20 00:00:00` (string, nullable, optional)
+ homepage: `https://morar.com/facilis-labore.html` (string, nullable, optional) - Personal homepage of the author
+ country_code: `DE` (string, nullable, optional) - ISO 3166-1 alpha-2 code of the country

## AuthorRequest (object, fixed-type)

+ last_name: `Wehner` (string, required)
+ first_name: `Tony` (string, required)
+ date_of_birth: `2002-08-20 00:00:00` (string, nullable, optional)
+ homepage: `https://morar.com/facilis-labore.html` (string, nullable, optional) - Personal homepage of the author
+ country_code: `DE` (string, nullable, optional) - ISO 3166-1 alpha-2 code of the country

## BookResponse (object, fixed-type)

+ id: `1` (number, required) - ID of the book
+ title: `Reprehenderit quod enim` (string, required)
+ description: `Quas dicta itaque iure ut consequatur laborum voluptatibus.` (string, required)
+ publisher: `omnis` (string, required)
+ price: `24` (number, required) - Personal homepage of the author
+ author_id: `1` (number, required) - ID of the author
+ country_code: `DE` (string, required) - ISO 3166-1 alpha-2 code of the country
+ language_code: `de` (string, required) - ISO 639-1 code of the language

## BookRequest (object, fixed)

+ title: `Reprehenderit quod enim` (string, required)
+ description: `Quas dicta itaque iure ut consequatur laborum voluptatibus.` (string, required)
+ publisher: `omnis` (string, required)
+ price: `24` (number, required) - Personal homepage of the author
+ author_id: `1` (number, required) - ID of the author
+ country_code: `DE` (string, required) - ISO 3166-1 alpha-2 code of the country
+ language_code: `de` (string, required) - ISO 639-1 code of the language

## Error422 (object)
+ title: `Invalid Request` (required, string) - Short, human-readable summary of the error
+ message: `The given data was invalid.` (required, string) - Human-readable explanation for this specific error
+ errors (ValidationError, required)
+ status: 422 (required, number) - HTTP status code generated by the origin server

## Error401 (object)
+ title: `Unauthorized` (required, string) - Short, human-readable summary of the error
+ message: `You are not authorized to access this resource.` (required, string) - Human-readable explanation for this specific error
+ status: 401 (required, number) - HTTP status code generated by the origin server

## Error404 (object)
+ title: `Record not found` (required, string) - Short, human-readable summary of the error
+ message: `The requested resource could not be found.` (required, string) - Human-readable explanation for this specific error
+ status: 404 (required, number) - HTTP status code generated by the origin server

## Error405 (object)
+ title: `Method Not Allowed` (required, string) - Short, human-readable summary of the error
+ message: `The method specified in the request is not allowed for this resource.` (required, string) - Human-readable explanation for this specific error
+ status: 405 (required, number) - HTTP status code generated by the origin server

## Error500 (object)
+ title: `Internal Server Error` (required, string) - Short, human-readable summary of the error
+ message: `Whoops, looks like something went wrong.` (required, string) - Human-readable explanation for this specific error
+ status: 500 (required, number) - HTTP status code generated by the origin server

## ValidationError (object)
+ *title (string)* (array[string])
    + "Please specify a book title" (string)
